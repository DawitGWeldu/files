datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum UserRole {
  ADMIN
  USER
}

enum TransactionStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  image               String?
  password            String?
  role                UserRole  @default(USER)
  isTwoFactorEnabled  Boolean   @default(false)
  Workers             Worker[]
}

model Worker {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  name        String
  phoneNumber String?
  idType      String? @unique
  idNumber    String? @unique
  idImage     String?
  isComplete  Boolean @default(false)

  files File[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model VerificationToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model PasswordResetToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model Attachment {
  id       String @id @default(uuid())
  name     String?
  type     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  files File[]
}


model File {
  id       String @id @default(uuid())
  name     String?
  status   Boolean?
  url      String? @db.Text
  text      String? @db.Text
  workerId String
  worker   Worker @relation(fields: [workerId], references: [id])
  attachmentId String
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Requirement {
  id          String       @id @default(uuid())
  title       String
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// model MuxData {
//   id         String  @id @default(uuid())
//   assetId    String
//   playbackId String?

//   chapterId String  @unique
//   chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
// }

// model UserProgress {
//   id     String @id @default(uuid())
//   userId String
//   user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   workerId String
//   worker   Worker @relation(fields: [workerId], references: [id], onDelete: Cascade)

//   isCompleted Boolean @default(false)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

// }

// model Purchase {
//   id     String @id @default(uuid())
//   userId String

//   courseId String
//   course   Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
//   tx_ref   String?

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()
//   Worker    Worker?  @relation(fields: [workerId], references: [id])
//   workerId  String?

//   @@unique([userId, courseId])
//   @@index([courseId])
// }

// model StripeCustomer {
//   id               String @id @default(uuid())
//   userId           String @unique
//   stripeCustomerId String @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model ChapaTransaction {
//   id       String            @id @default(uuid())
//   userId   String
//   courseId String
//   tx_ref   String            @unique
//   status   TransactionStatus @default(PENDING)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
