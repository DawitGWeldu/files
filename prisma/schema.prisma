datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

enum UserRole {
  ADMIN
  USER
}

enum TransactionStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  phoneNumber         String    @unique
  phoneNumberVerified DateTime?
  image               String?
  password            String?
  role                UserRole  @default(USER)
  isTwoFactorEnabled  Boolean   @default(false)
  Workers             Worker[]
  Actions             Action[]
}

model Worker {
  id          String  @id @default(cuid())
  userId      String
  user        User    @relation(fields: [userId], references: [id])
  name        String
  phoneNumber String?
  country     String?
  isComplete  Boolean @default(false)
  departureStatus  Boolean @default(false)

  files     File[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Action    Action[]
}

model VerificationToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model PasswordResetToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model TwoFactorToken {
  id          String   @id @default(cuid())
  phoneNumber String
  token       String   @unique
  expires     DateTime

  @@unique([phoneNumber, token])
}

model Attachment {
  id            String      @id @default(uuid())
  name          String?
  type          String?
  position      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  requirementId String
  requirement   Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  files  File[]
  Action Action[]
}

model File {
  id           String     @id @default(uuid())
  name         String?
  status       Boolean?
  url          String?    @db.Text
  text         String?    @db.Text
  dateTime     DateTime?
  workerId     String
  worker       Worker     @relation(fields: [workerId], references: [id])
  attachmentId String
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model Action {
  id           String     @id @default(uuid())
  action       String?
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  workerId     String
  worker       Worker     @relation(fields: [workerId], references: [id])
  attachmentId String
  attachment   Attachment @relation(fields: [attachmentId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
}

model Requirement {
  id          String       @id @default(uuid())
  title       String
  attachments Attachment[]
  position    Int?
  note        String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
}

model Countries {
  id   String @id @default(uuid())
  name String
}
